public module sys/dom/events/eventTarget

// Interface EventTarget (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeEventTarget  : forall<a> (a) -> maybe<eventTarget>
{ inline "(#1.toString()==='[object EventTarget]'?std_core.Just(#1):std_core.Nothing)" }
external inline toEventTarget : forall<a> (a) -> exn eventTarget
{ inline "(#1.toString()==='[object EventTarget]'?#1:std_core.error('toEventTarget: cast failed'))" }


// EventTarget implements EventTarget (supplemental)
external inline addEventListener : (this: eventTarget, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: eventTarget, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: eventTarget, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: eventTarget, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: eventTarget, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

