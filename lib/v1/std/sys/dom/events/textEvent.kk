public module sys/dom/events/textEvent

// Interface TextEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeTextEvent  : forall<a> (a) -> maybe<textEvent>
{ inline "(#1.toString()==='[object TextEvent]'?std_core.Just(#1):std_core.Nothing)" }
external inline toTextEvent : forall<a> (a) -> exn textEvent
{ inline "(#1.toString()==='[object TextEvent]'?#1:std_core.error('toTextEvent: cast failed'))" }


// TextEvent implements TextEvent (supplemental)
external inline data : (this: textEvent) -> dom string
{ inline "#1.data" }
external inline inputMethod : (this: textEvent) -> dom uint32
{ inline "#1.inputMethod" }
external inline locale : (this: textEvent) -> dom string
{ inline "#1.locale" }
external inline initTextEvent : (this: textEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, dataArg: string, inputMethod: uint32, localeArg: string) -> dom ()
{ inline "#1.initTextEvent(#2, #3, #4, #5, #6, #7, #8)" }

// TextEvent extends UIEvent
external inline uiEvent : (textEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// TextEvent implements in extension UIEvent (overloading)
external inline view : (this: textEvent) -> dom abstractView
{ inline "#1.view" }
external inline detail : (this: textEvent) -> dom int32
{ inline "#1.detail" }
external inline initUiEvent : (this: textEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// TextEvent extends Event
external inline event : (textEvent) -> event // upcasting to extended type
{ inline "#1" }
// TextEvent implements in extension Event (overloading)
external inline type_ : (this: textEvent) -> dom string
{ inline "#1.type" }
external inline target : (this: textEvent) -> dom eventTarget
{ inline "#1.target" }
external inline currentTarget : (this: textEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
external inline eventPhase : (this: textEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
external inline stopPropagation : (this: textEvent) -> dom ()
{ inline "#1.stopPropagation()" }

external inline stopImmediatePropagation : (this: textEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

external inline bubbles : (this: textEvent) -> dom bool
{ inline "#1.bubbles" }
external inline cancelable : (this: textEvent) -> dom bool
{ inline "#1.cancelable" }
external inline preventDefault : (this: textEvent) -> dom ()
{ inline "#1.preventDefault()" }

external inline defaultPrevented : (this: textEvent) -> dom bool
{ inline "#1.defaultPrevented" }
external inline isTrusted : (this: textEvent) -> dom bool
{ inline "#1.isTrusted" }
external inline timeStamp : (this: textEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
external inline initEvent : (this: textEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

