public module sys/dom/events/mouseEvent

// Interface MouseEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeMouseEvent  : forall<a> (a) -> maybe<mouseEvent>
{ inline "(#1.toString()==='[object MouseEvent]'?std_core.Just(#1):std_core.Nothing)" }
external inline toMouseEvent : forall<a> (a) -> exn mouseEvent
{ inline "(#1.toString()==='[object MouseEvent]'?#1:std_core.error('toMouseEvent: cast failed'))" }


// MouseEvent implements MouseEvent (supplemental)
external inline screenX : (this: mouseEvent) -> dom int32
{ inline "#1.screenX" }
external inline screenY : (this: mouseEvent) -> dom int32
{ inline "#1.screenY" }
external inline clientX : (this: mouseEvent) -> dom int32
{ inline "#1.clientX" }
external inline clientY : (this: mouseEvent) -> dom int32
{ inline "#1.clientY" }
external inline ctrlKey : (this: mouseEvent) -> dom bool
{ inline "#1.ctrlKey" }
external inline shiftKey : (this: mouseEvent) -> dom bool
{ inline "#1.shiftKey" }
external inline altKey : (this: mouseEvent) -> dom bool
{ inline "#1.altKey" }
external inline metaKey : (this: mouseEvent) -> dom bool
{ inline "#1.metaKey" }
external inline button : (this: mouseEvent) -> dom eventPhase
{ inline "#1.button" }
external inline buttons : (this: mouseEvent) -> dom eventPhase
{ inline "#1.buttons" }
external inline relatedTarget : (this: mouseEvent) -> dom eventTarget
{ inline "#1.relatedTarget" }
external inline initMouseEvent : (this: mouseEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32, screenXArg: int32, screenYArg: int32, clientXArg: int32, clientYArg: int32, ctrlKeyArg: bool, altKeyArg: bool, shiftKeyArg: bool, metaKeyArg: bool, buttonArg: uint16, relatedTargetArg: eventTarget) -> dom ()
{ inline "#1.initMouseEvent(#2, #3, #4, #5, #6, #7, #8, #9, #10, #11, #12, #13, #14, #15, #16)" }

external inline getModifierState : (this: mouseEvent, keyArg: string) -> dom bool
{ inline "#1.getModifierState(#2)" }

// MouseEvent implements MouseEvent (supplemental)
external inline pageX : (this: mouseEvent) -> dom int32
{ inline "#1.pageX" }
external inline pageY : (this: mouseEvent) -> dom int32
{ inline "#1.pageY" }
external inline x : (this: mouseEvent) -> dom int32
{ inline "#1.x" }
external inline y : (this: mouseEvent) -> dom int32
{ inline "#1.y" }
external inline offsetX : (this: mouseEvent) -> dom int32
{ inline "#1.offsetX" }
external inline offsetY : (this: mouseEvent) -> dom int32
{ inline "#1.offsetY" }
// MouseEvent extends UIEvent
external inline uiEvent : (mouseEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// MouseEvent implements in extension UIEvent (overloading)
external inline view : (this: mouseEvent) -> dom abstractView
{ inline "#1.view" }
external inline detail : (this: mouseEvent) -> dom int32
{ inline "#1.detail" }
external inline initUiEvent : (this: mouseEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// MouseEvent extends Event
external inline event : (mouseEvent) -> event // upcasting to extended type
{ inline "#1" }
// MouseEvent implements in extension Event (overloading)
external inline type_ : (this: mouseEvent) -> dom string
{ inline "#1.type" }
external inline target : (this: mouseEvent) -> dom eventTarget
{ inline "#1.target" }
external inline currentTarget : (this: mouseEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
external inline eventPhase : (this: mouseEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
external inline stopPropagation : (this: mouseEvent) -> dom ()
{ inline "#1.stopPropagation()" }

external inline stopImmediatePropagation : (this: mouseEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

external inline bubbles : (this: mouseEvent) -> dom bool
{ inline "#1.bubbles" }
external inline cancelable : (this: mouseEvent) -> dom bool
{ inline "#1.cancelable" }
external inline preventDefault : (this: mouseEvent) -> dom ()
{ inline "#1.preventDefault()" }

external inline defaultPrevented : (this: mouseEvent) -> dom bool
{ inline "#1.defaultPrevented" }
external inline isTrusted : (this: mouseEvent) -> dom bool
{ inline "#1.isTrusted" }
external inline timeStamp : (this: mouseEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
external inline initEvent : (this: mouseEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

