public module sys/dom/events/keyboardEvent

// Interface KeyboardEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeKeyboardEvent  : forall<a> (a) -> maybe<keyboardEvent>
{ inline "(#1.toString()==='[object KeyboardEvent]'?std_core.Just(#1):std_core.Nothing)" }
external inline toKeyboardEvent : forall<a> (a) -> exn keyboardEvent
{ inline "(#1.toString()==='[object KeyboardEvent]'?#1:std_core.error('toKeyboardEvent: cast failed'))" }


// KeyboardEvent implements KeyboardEvent (supplemental)
external inline char : (this: keyboardEvent) -> dom char
{ inline "String.fromCharCode(#1.keyCode)" }

external inline string : (this: keyboardEvent) -> dom string
{ inline "String.fromCharCode(#1.keyCode)" }

external inline location : (this: keyboardEvent) -> dom uint32
{ inline "#1.location" }
external inline ctrlKey : (this: keyboardEvent) -> dom bool
{ inline "#1.ctrlKey" }
external inline shiftKey : (this: keyboardEvent) -> dom bool
{ inline "#1.shiftKey" }
external inline altKey : (this: keyboardEvent) -> dom bool
{ inline "#1.altKey" }
external inline metaKey : (this: keyboardEvent) -> dom bool
{ inline "#1.metaKey" }
external inline repeat : (this: keyboardEvent) -> dom bool
{ inline "#1.repeat" }
external inline locale : (this: keyboardEvent) -> dom string
{ inline "#1.locale" }
external inline getModifierState : (this: keyboardEvent, keyArg: string) -> dom bool
{ inline "#1.getModifierState(#2)" }

external inline initKeyboardEvent : (this: keyboardEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, charArg: string, keyArg: string, locationArg: uint32, modifiersListArg: string, repeat: bool, localeArg: string) -> dom ()
{ inline "#1.initKeyboardEvent(#2, #3, #4, #5, #6, #7, #8, #9, #10, #11)" }

// KeyboardEvent implements KeyboardEvent-35 (supplemental)
external inline charCode : (this: keyboardEvent) -> dom uint32
{ inline "#1.charCode" }
external inline keyCode : (this: keyboardEvent) -> dom uint32
{ inline "#1.keyCode" }
external inline which : (this: keyboardEvent) -> dom uint32
{ inline "#1.which" }
// KeyboardEvent extends UIEvent
external inline uiEvent : (keyboardEvent) -> uiEvent // upcasting to extended type
{ inline "#1" }
// KeyboardEvent implements in extension UIEvent (overloading)
external inline view : (this: keyboardEvent) -> dom abstractView
{ inline "#1.view" }
external inline detail : (this: keyboardEvent) -> dom int32
{ inline "#1.detail" }
external inline initUiEvent : (this: keyboardEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, viewArg: abstractView, detailArg: int32) -> dom ()
{ inline "#1.initUIEvent(#2, #3, #4, #5, #6)" }

// KeyboardEvent extends Event
external inline event : (keyboardEvent) -> event // upcasting to extended type
{ inline "#1" }
// KeyboardEvent implements in extension Event (overloading)
external inline type_ : (this: keyboardEvent) -> dom string
{ inline "#1.type" }
external inline target : (this: keyboardEvent) -> dom eventTarget
{ inline "#1.target" }
external inline currentTarget : (this: keyboardEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
external inline eventPhase : (this: keyboardEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
external inline stopPropagation : (this: keyboardEvent) -> dom ()
{ inline "#1.stopPropagation()" }

external inline stopImmediatePropagation : (this: keyboardEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

external inline bubbles : (this: keyboardEvent) -> dom bool
{ inline "#1.bubbles" }
external inline cancelable : (this: keyboardEvent) -> dom bool
{ inline "#1.cancelable" }
external inline preventDefault : (this: keyboardEvent) -> dom ()
{ inline "#1.preventDefault()" }

external inline defaultPrevented : (this: keyboardEvent) -> dom bool
{ inline "#1.defaultPrevented" }
external inline isTrusted : (this: keyboardEvent) -> dom bool
{ inline "#1.isTrusted" }
external inline timeStamp : (this: keyboardEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
external inline initEvent : (this: keyboardEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

