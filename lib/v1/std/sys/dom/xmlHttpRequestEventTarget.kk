public module sys/dom/xmlHttpRequestEventTarget

// Interface XMLHttpRequestEventTarget (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeXmlHttpRequestEventTarget  : forall<a> (a) -> maybe<xmlHttpRequestEventTarget>
{ inline "(#1.toString()==='[object XMLHttpRequestEventTarget]'?std_core.Just(#1):std_core.Nothing)" }
external inline toXmlHttpRequestEventTarget : forall<a> (a) -> exn xmlHttpRequestEventTarget
{ inline "(#1.toString()==='[object XMLHttpRequestEventTarget]'?#1:std_core.error('toXmlHttpRequestEventTarget: cast failed'))" }


// XMLHttpRequestEventTarget implements XMLHttpRequestEventTarget (supplemental)
external inline onloadstart : (this: xmlHttpRequestEventTarget) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
external inline onloadstart : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onloadstart : forall<e> (this: xmlHttpRequestEventTarget, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onprogress : (this: xmlHttpRequestEventTarget) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
external inline onprogress : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onprogress : forall<e> (this: xmlHttpRequestEventTarget, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onabort : (this: xmlHttpRequestEventTarget) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
external inline onabort : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onabort : forall<e> (this: xmlHttpRequestEventTarget, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onerror : (this: xmlHttpRequestEventTarget) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: xmlHttpRequestEventTarget, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onload : (this: xmlHttpRequestEventTarget) -> dom (event -> dom ())
{ inline "#1.onload" }
external inline onload : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onload : forall<e> (this: xmlHttpRequestEventTarget, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline ontimeout : (this: xmlHttpRequestEventTarget) -> dom (event -> dom ())
{ inline "#1.ontimeout" }
external inline ontimeout : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
external inline ontimeout : forall<e> (this: xmlHttpRequestEventTarget, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
external inline onloadend : (this: xmlHttpRequestEventTarget) -> dom (progressEvent -> dom ())
{ inline "#1.onloadend" }
external inline onloadend : forall<e> (this: xmlHttpRequestEventTarget, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
external inline onloadend : forall<e> (this: xmlHttpRequestEventTarget, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
// XMLHttpRequestEventTarget extends EventTarget
external inline eventTarget : (xmlHttpRequestEventTarget) -> eventTarget // upcasting to extended type
{ inline "#1" }
// XMLHttpRequestEventTarget implements in extension EventTarget (overloading)
external inline addEventListener : (this: xmlHttpRequestEventTarget, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: xmlHttpRequestEventTarget, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: xmlHttpRequestEventTarget, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: xmlHttpRequestEventTarget, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: xmlHttpRequestEventTarget, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

