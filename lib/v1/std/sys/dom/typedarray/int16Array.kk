public module sys/dom/typedarray/int16Array

// Interface Int16Array (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeInt16Array  : forall<a> (a) -> maybe<int16Array>
{ inline "(#1.toString()==='[object Int16Array]'?std_core.Just(#1):std_core.Nothing)" }
external inline toInt16Array : forall<a> (a) -> exn int16Array
{ inline "(#1.toString()==='[object Int16Array]'?#1:std_core.error('toInt16Array: cast failed'))" }


// Int16Array implements Int16Array (supplemental)
external inline length : (this: int16Array) -> dom uint32
{ inline "#1.length" }
external inline get : (this: int16Array, index: uint32) -> dom int16
{ inline "#1[#2]" }

external inline set : (this: int16Array, index: uint32, value: int16) -> dom ()
{ inline "(#1[#2] = #3)" }

/* hidden version of set */
/* hidden version of set */
external inline subarray : (this: int16Array, start: int32, end: int32) -> dom int16Array
{ inline "#1.subarray(#2, #3)" }

// Int16Array extends ArrayBufferView
external inline arrayBufferView : (int16Array) -> arrayBufferView // upcasting to extended type
{ inline "#1" }
// Int16Array implements in extension ArrayBufferView (overloading)
external inline buffer : (this: int16Array) -> dom arrayBuffer
{ inline "#1.buffer" }
external inline byteOffset : (this: int16Array) -> dom uint32
{ inline "#1.byteOffset" }
external inline byteLength : (this: int16Array) -> dom uint32
{ inline "#1.byteLength" }
