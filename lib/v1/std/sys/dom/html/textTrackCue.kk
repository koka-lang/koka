public module sys/dom/html/textTrackCue

// Interface TextTrackCue (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeTextTrackCue  : forall<a> (a) -> maybe<textTrackCue>
{ inline "(#1.toString()==='[object TextTrackCue]'?std_core.Just(#1):std_core.Nothing)" }
external inline toTextTrackCue : forall<a> (a) -> exn textTrackCue
{ inline "(#1.toString()==='[object TextTrackCue]'?#1:std_core.error('toTextTrackCue: cast failed'))" }


// TextTrackCue implements TextTrackCue (supplemental)
external inline track : (this: textTrackCue) -> dom textTrack
{ inline "#1.track" }
external inline id : (this: textTrackCue) -> dom string
{ inline "#1.id" }
external inline startTime : (this: textTrackCue) -> dom float64
{ inline "#1.startTime" }
external inline endTime : (this: textTrackCue) -> dom float64
{ inline "#1.endTime" }
external inline pauseOnExit : (this: textTrackCue) -> dom bool
{ inline "#1.pauseOnExit" }
external inline direction : (this: textTrackCue) -> dom string
{ inline "#1.direction" }
external inline snapToLines : (this: textTrackCue) -> dom bool
{ inline "#1.snapToLines" }
external inline linePosition : (this: textTrackCue) -> dom int32
{ inline "#1.linePosition" }
external inline textPosition : (this: textTrackCue) -> dom int32
{ inline "#1.textPosition" }
external inline size : (this: textTrackCue) -> dom int32
{ inline "#1.size" }
external inline alignment : (this: textTrackCue) -> dom string
{ inline "#1.alignment" }
external inline getCueAsSource : (this: textTrackCue) -> dom string
{ inline "#1.getCueAsSource()" }

external inline getCueAsHtml : (this: textTrackCue) -> dom documentFragment
{ inline "#1.getCueAsHTML()" }

external inline onenter : (this: textTrackCue) -> dom (event -> dom ())
{ inline "#1.onenter" }
external inline onenter : forall<e> (this: textTrackCue, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onenter = #2)" }
external inline onenter : forall<e> (this: textTrackCue, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onenter = #2)" }
external inline onexit : (this: textTrackCue) -> dom (event -> dom ())
{ inline "#1.onexit" }
external inline onexit : forall<e> (this: textTrackCue, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onexit = #2)" }
external inline onexit : forall<e> (this: textTrackCue, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onexit = #2)" }
// TextTrackCue implements EventTarget (overloading)
external inline addEventListener : (this: textTrackCue, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: textTrackCue, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: textTrackCue, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: textTrackCue, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: textTrackCue, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

