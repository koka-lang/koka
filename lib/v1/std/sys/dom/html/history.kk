public module sys/dom/html/history

// Interface History (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeHistory  : forall<a> (a) -> maybe<history>
{ inline "(#1.toString()==='[object History]'?std_core.Just(#1):std_core.Nothing)" }
external inline toHistory : forall<a> (a) -> exn history
{ inline "(#1.toString()==='[object History]'?#1:std_core.error('toHistory: cast failed'))" }


// History implements History (supplemental)
external inline length : (this: history) -> dom int32
{ inline "#1.length" }
external inline state : (this: history) -> dom any /* anyGetter */
{ inline "#1.state" }
external inline go : (this: history) -> dom ()
{ inline "#1.go()" }

external inline go : (this: history, delta: int32) -> dom ()
{ inline "#1.go(#2)" }

external inline back : (this: history) -> dom ()
{ inline "#1.back()" }

external inline forward : (this: history) -> dom ()
{ inline "#1.forward()" }

external inline pushState : forall<a> (this: history, data: a /* anyArg */, title: string) -> dom ()
{ inline "#1.pushState(#2, #3)" }

external inline pushState : forall<a> (this: history, data: a /* anyArg */, title: string, url: string) -> dom ()
{ inline "#1.pushState(#2, #3, #4)" }

external inline replaceState : forall<a> (this: history, data: a /* anyArg */, title: string) -> dom ()
{ inline "#1.replaceState(#2, #3)" }

external inline replaceState : forall<a> (this: history, data: a /* anyArg */, title: string, url: string) -> dom ()
{ inline "#1.replaceState(#2, #3, #4)" }

