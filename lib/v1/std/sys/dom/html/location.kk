public module sys/dom/html/location

// Interface Location (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeLocation  : forall<a> (a) -> maybe<location>
{ inline "(#1.toString()==='[object Location]'?std_core.Just(#1):std_core.Nothing)" }
external inline toLocation : forall<a> (a) -> exn location
{ inline "(#1.toString()==='[object Location]'?#1:std_core.error('toLocation: cast failed'))" }


// Location implements Location (supplemental)
external inline href : (this: location) -> dom string
{ inline "#1.href" }
external inline href : (this: location, assigned: string) -> dom ()
{ inline "(#1.href = #2)" }
external inline assign : (this: location, url: string) -> dom ()
{ inline "#1.assign(#2)" }

external inline replace : (this: location, url: string) -> dom ()
{ inline "#1.replace(#2)" }

external inline reload : (this: location) -> dom ()
{ inline "#1.reload()" }

external inline protocol : (this: location) -> dom string
{ inline "#1.protocol" }
external inline protocol : (this: location, assigned: string) -> dom ()
{ inline "(#1.protocol = #2)" }
external inline host : (this: location) -> dom string
{ inline "#1.host" }
external inline host : (this: location, assigned: string) -> dom ()
{ inline "(#1.host = #2)" }
external inline hostname : (this: location) -> dom string
{ inline "#1.hostname" }
external inline hostname : (this: location, assigned: string) -> dom ()
{ inline "(#1.hostname = #2)" }
external inline port : (this: location) -> dom string
{ inline "#1.port" }
external inline port : (this: location, assigned: string) -> dom ()
{ inline "(#1.port = #2)" }
external inline pathname : (this: location) -> dom string
{ inline "#1.pathname" }
external inline pathname : (this: location, assigned: string) -> dom ()
{ inline "(#1.pathname = #2)" }
external inline search : (this: location) -> dom string
{ inline "#1.search" }
external inline search : (this: location, assigned: string) -> dom ()
{ inline "(#1.search = #2)" }
external inline hash : (this: location) -> dom string
{ inline "#1.hash" }
external inline hash : (this: location, assigned: string) -> dom ()
{ inline "(#1.hash = #2)" }
external inline resolveUrl : (this: location, url: string) -> dom string
{ inline "#1.resolveURL(#2)" }

