public module sys/dom/html/streamEvent

// Interface StreamEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeStreamEvent  : forall<a> (a) -> maybe<streamEvent>
{ inline "(#1.toString()==='[object StreamEvent]'?std_core.Just(#1):std_core.Nothing)" }
external inline toStreamEvent : forall<a> (a) -> exn streamEvent
{ inline "(#1.toString()==='[object StreamEvent]'?#1:std_core.error('toStreamEvent: cast failed'))" }


// StreamEvent implements StreamEvent (supplemental)
external inline stream : (this: streamEvent) -> dom mediaStream
{ inline "#1.stream" }
external inline initStreamEvent : (this: streamEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, streamArg: mediaStream) -> dom ()
{ inline "#1.initStreamEvent(#2, #3, #4, #5)" }

// StreamEvent extends Event
external inline event : (streamEvent) -> event // upcasting to extended type
{ inline "#1" }
// StreamEvent implements in extension Event (overloading)
external inline type_ : (this: streamEvent) -> dom string
{ inline "#1.type" }
external inline target : (this: streamEvent) -> dom eventTarget
{ inline "#1.target" }
external inline currentTarget : (this: streamEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
external inline eventPhase : (this: streamEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
external inline stopPropagation : (this: streamEvent) -> dom ()
{ inline "#1.stopPropagation()" }

external inline stopImmediatePropagation : (this: streamEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

external inline bubbles : (this: streamEvent) -> dom bool
{ inline "#1.bubbles" }
external inline cancelable : (this: streamEvent) -> dom bool
{ inline "#1.cancelable" }
external inline preventDefault : (this: streamEvent) -> dom ()
{ inline "#1.preventDefault()" }

external inline defaultPrevented : (this: streamEvent) -> dom bool
{ inline "#1.defaultPrevented" }
external inline isTrusted : (this: streamEvent) -> dom bool
{ inline "#1.isTrusted" }
external inline timeStamp : (this: streamEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
external inline initEvent : (this: streamEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

