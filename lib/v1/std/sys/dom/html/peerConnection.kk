public module sys/dom/html/peerConnection

// Interface PeerConnection (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybePeerConnection  : forall<a> (a) -> maybe<peerConnection>
{ inline "(#1.toString()==='[object PeerConnection]'?std_core.Just(#1):std_core.Nothing)" }
external inline toPeerConnection : forall<a> (a) -> exn peerConnection
{ inline "(#1.toString()==='[object PeerConnection]'?#1:std_core.error('toPeerConnection: cast failed'))" }


// PeerConnection implements PeerConnection (supplemental)
external inline signalingMessage : (this: peerConnection, message: string) -> dom ()
{ inline "#1.signalingMessage(#2)" }

external inline readyState : (this: peerConnection) -> dom peerConnectionReadyState
{ inline "#1.readyState" }
external inline send : (this: peerConnection, text: string) -> dom ()
{ inline "#1.send(#2)" }

external inline addStream : (this: peerConnection, stream: mediaStream) -> dom ()
{ inline "#1.addStream(#2)" }

external inline removeStream : (this: peerConnection, stream: mediaStream) -> dom ()
{ inline "#1.removeStream(#2)" }

external inline localStreams : (this: peerConnection) -> dom array
{ inline "#1.localStreams" }
external inline remoteStreams : (this: peerConnection) -> dom array
{ inline "#1.remoteStreams" }
external inline close : (this: peerConnection) -> dom ()
{ inline "#1.close()" }

external inline onconnecting : (this: peerConnection) -> dom (event -> dom ())
{ inline "#1.onconnecting" }
external inline onconnecting : forall<e> (this: peerConnection, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onconnecting = #2)" }
external inline onconnecting : forall<e> (this: peerConnection, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onconnecting = #2)" }
external inline onopen : (this: peerConnection) -> dom (event -> dom ())
{ inline "#1.onopen" }
external inline onopen : forall<e> (this: peerConnection, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onopen = #2)" }
external inline onopen : forall<e> (this: peerConnection, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onopen = #2)" }
external inline onmessage : (this: peerConnection) -> dom (event -> dom ())
{ inline "#1.onmessage" }
external inline onmessage : forall<e> (this: peerConnection, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
external inline onmessage : forall<e> (this: peerConnection, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
external inline onaddstream : (this: peerConnection) -> dom (event -> dom ())
{ inline "#1.onaddstream" }
external inline onaddstream : forall<e> (this: peerConnection, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onaddstream = #2)" }
external inline onaddstream : forall<e> (this: peerConnection, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onaddstream = #2)" }
external inline onremovestream : (this: peerConnection) -> dom (event -> dom ())
{ inline "#1.onremovestream" }
external inline onremovestream : forall<e> (this: peerConnection, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onremovestream = #2)" }
external inline onremovestream : forall<e> (this: peerConnection, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onremovestream = #2)" }
// PeerConnection implements EventTarget (overloading)
external inline addEventListener : (this: peerConnection, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: peerConnection, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: peerConnection, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: peerConnection, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: peerConnection, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

