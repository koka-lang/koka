public module sys/dom/html/messageEvent

// Interface MessageEvent (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeMessageEvent  : forall<a> (a) -> maybe<messageEvent>
{ inline "(#1.toString()==='[object MessageEvent]'?std_core.Just(#1):std_core.Nothing)" }
external inline toMessageEvent : forall<a> (a) -> exn messageEvent
{ inline "(#1.toString()==='[object MessageEvent]'?#1:std_core.error('toMessageEvent: cast failed'))" }


// MessageEvent implements MessageEvent (supplemental)
external inline data : (this: messageEvent) -> dom any /* anyGetter */
{ inline "#1.data" }
external inline origin : (this: messageEvent) -> dom string
{ inline "#1.origin" }
external inline lastEventId : (this: messageEvent) -> dom string
{ inline "#1.lastEventId" }
external inline source : (this: messageEvent) -> dom windowProxy
{ inline "#1.source" }
external inline ports : (this: messageEvent) -> dom array
{ inline "#1.ports" }
external inline initMessageEvent : forall<a> (this: messageEvent, typeArg: string, canBubbleArg: bool, cancelableArg: bool, dataArg: a /* anyArg */, originArg: string, lastEventIdArg: string, sourceArg: windowProxy, portsArg: seqence) -> dom ()
{ inline "#1.initMessageEvent(#2, #3, #4, #5, #6, #7, #8, #9)" }

// MessageEvent extends Event
external inline event : (messageEvent) -> event // upcasting to extended type
{ inline "#1" }
// MessageEvent implements in extension Event (overloading)
external inline type_ : (this: messageEvent) -> dom string
{ inline "#1.type" }
external inline target : (this: messageEvent) -> dom eventTarget
{ inline "#1.target" }
external inline currentTarget : (this: messageEvent) -> dom eventTarget
{ inline "#1.currentTarget" }
external inline eventPhase : (this: messageEvent) -> dom eventPhase
{ inline "#1.eventPhase" }
external inline stopPropagation : (this: messageEvent) -> dom ()
{ inline "#1.stopPropagation()" }

external inline stopImmediatePropagation : (this: messageEvent) -> dom ()
{ inline "#1.stopImmediatePropagation()" }

external inline bubbles : (this: messageEvent) -> dom bool
{ inline "#1.bubbles" }
external inline cancelable : (this: messageEvent) -> dom bool
{ inline "#1.cancelable" }
external inline preventDefault : (this: messageEvent) -> dom ()
{ inline "#1.preventDefault()" }

external inline defaultPrevented : (this: messageEvent) -> dom bool
{ inline "#1.defaultPrevented" }
external inline isTrusted : (this: messageEvent) -> dom bool
{ inline "#1.isTrusted" }
external inline timeStamp : (this: messageEvent) -> dom domTimeStamp
{ inline "#1.timeStamp" }
external inline initEvent : (this: messageEvent, type_: string, bubbles: bool, cancelable: bool) -> dom ()
{ inline "#1.initEvent(#2, #3, #4)" }

