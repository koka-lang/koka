public module sys/dom/html/applicationCache

// Interface ApplicationCache (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeApplicationCache  : forall<a> (a) -> maybe<applicationCache>
{ inline "(#1.toString()==='[object ApplicationCache]'?std_core.Just(#1):std_core.Nothing)" }
external inline toApplicationCache : forall<a> (a) -> exn applicationCache
{ inline "(#1.toString()==='[object ApplicationCache]'?#1:std_core.error('toApplicationCache: cast failed'))" }


// ApplicationCache implements ApplicationCache (supplemental)
external inline status : (this: applicationCache) -> dom applicationCacheStatus
{ inline "#1.status" }
external inline update : (this: applicationCache) -> dom ()
{ inline "#1.update()" }

external inline swapCache : (this: applicationCache) -> dom ()
{ inline "#1.swapCache()" }

external inline onchecking : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onchecking" }
external inline onchecking : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchecking = #2)" }
external inline onchecking : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchecking = #2)" }
external inline onerror : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onnoupdate : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onnoupdate" }
external inline onnoupdate : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onnoupdate = #2)" }
external inline onnoupdate : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onnoupdate = #2)" }
external inline ondownloading : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.ondownloading" }
external inline ondownloading : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondownloading = #2)" }
external inline ondownloading : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondownloading = #2)" }
external inline onprogress : (this: applicationCache) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
external inline onprogress : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onprogress : forall<e> (this: applicationCache, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onupdateready : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onupdateready" }
external inline onupdateready : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onupdateready = #2)" }
external inline onupdateready : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onupdateready = #2)" }
external inline oncached : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.oncached" }
external inline oncached : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncached = #2)" }
external inline oncached : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncached = #2)" }
external inline onobsolete : (this: applicationCache) -> dom (event -> dom ())
{ inline "#1.onobsolete" }
external inline onobsolete : forall<e> (this: applicationCache, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onobsolete = #2)" }
external inline onobsolete : forall<e> (this: applicationCache, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onobsolete = #2)" }
// ApplicationCache implements EventTarget (overloading)
external inline addEventListener : (this: applicationCache, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: applicationCache, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: applicationCache, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: applicationCache, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: applicationCache, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

