public module sys/dom/html/validityState

// Interface ValidityState (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeValidityState  : forall<a> (a) -> maybe<validityState>
{ inline "(#1.toString()==='[object ValidityState]'?std_core.Just(#1):std_core.Nothing)" }
external inline toValidityState : forall<a> (a) -> exn validityState
{ inline "(#1.toString()==='[object ValidityState]'?#1:std_core.error('toValidityState: cast failed'))" }


// ValidityState implements ValidityState (supplemental)
external inline valueMissing : (this: validityState) -> dom bool
{ inline "#1.valueMissing" }
external inline typeMismatch : (this: validityState) -> dom bool
{ inline "#1.typeMismatch" }
external inline patternMismatch : (this: validityState) -> dom bool
{ inline "#1.patternMismatch" }
external inline tooLong : (this: validityState) -> dom bool
{ inline "#1.tooLong" }
external inline rangeUnderflow : (this: validityState) -> dom bool
{ inline "#1.rangeUnderflow" }
external inline rangeOverflow : (this: validityState) -> dom bool
{ inline "#1.rangeOverflow" }
external inline stepMismatch : (this: validityState) -> dom bool
{ inline "#1.stepMismatch" }
external inline customError : (this: validityState) -> dom bool
{ inline "#1.customError" }
external inline valid : (this: validityState) -> dom bool
{ inline "#1.valid" }
