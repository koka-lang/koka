public module sys/dom/html/mutableTextTrack

// Interface MutableTextTrack (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeMutableTextTrack  : forall<a> (a) -> maybe<mutableTextTrack>
{ inline "(#1.toString()==='[object MutableTextTrack]'?std_core.Just(#1):std_core.Nothing)" }
external inline toMutableTextTrack : forall<a> (a) -> exn mutableTextTrack
{ inline "(#1.toString()==='[object MutableTextTrack]'?#1:std_core.error('toMutableTextTrack: cast failed'))" }


// MutableTextTrack implements MutableTextTrack (supplemental)
external inline addCue : (this: mutableTextTrack, cue: textTrackCue) -> dom ()
{ inline "#1.addCue(#2)" }

external inline removeCue : (this: mutableTextTrack, cue: textTrackCue) -> dom ()
{ inline "#1.removeCue(#2)" }

// MutableTextTrack extends TextTrack
external inline textTrack : (mutableTextTrack) -> textTrack // upcasting to extended type
{ inline "#1" }
// MutableTextTrack implements in extension TextTrack (overloading)
external inline kind : (this: mutableTextTrack) -> dom string
{ inline "#1.kind" }
external inline label : (this: mutableTextTrack) -> dom string
{ inline "#1.label" }
external inline language : (this: mutableTextTrack) -> dom string
{ inline "#1.language" }
external inline readyState : (this: mutableTextTrack) -> dom textTrackReadyState
{ inline "#1.readyState" }
external inline onload : (this: mutableTextTrack) -> dom (event -> dom ())
{ inline "#1.onload" }
external inline onload : forall<e> (this: mutableTextTrack, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onload : forall<e> (this: mutableTextTrack, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onerror : (this: mutableTextTrack) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: mutableTextTrack, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: mutableTextTrack, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline mode : (this: mutableTextTrack) -> dom textTrackMode
{ inline "#1.mode" }
external inline mode : (this: mutableTextTrack, assigned: uint16) -> dom ()
{ inline "(#1.mode = #2)" }
external inline cues : (this: mutableTextTrack) -> dom textTrackCueList
{ inline "#1.cues" }
external inline activeCues : (this: mutableTextTrack) -> dom textTrackCueList
{ inline "#1.activeCues" }
external inline oncuechange : (this: mutableTextTrack) -> dom (event -> dom ())
{ inline "#1.oncuechange" }
external inline oncuechange : forall<e> (this: mutableTextTrack, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
external inline oncuechange : forall<e> (this: mutableTextTrack, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
// MutableTextTrack extends EventTarget
external inline eventTarget : (mutableTextTrack) -> eventTarget // upcasting to extended type
{ inline "#1" }
// MutableTextTrack implements in extension EventTarget (overloading)
external inline addEventListener : (this: mutableTextTrack, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: mutableTextTrack, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: mutableTextTrack, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: mutableTextTrack, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: mutableTextTrack, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

