public module sys/dom/html/messagePort

// Interface MessagePort (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeMessagePort  : forall<a> (a) -> maybe<messagePort>
{ inline "(#1.toString()==='[object MessagePort]'?std_core.Just(#1):std_core.Nothing)" }
external inline toMessagePort : forall<a> (a) -> exn messagePort
{ inline "(#1.toString()==='[object MessagePort]'?#1:std_core.error('toMessagePort: cast failed'))" }


// MessagePort implements MessagePort (supplemental)
external inline postMessage : forall<a> (this: messagePort, message: a /* anyArg */) -> dom ()
{ inline "#1.postMessage(#2)" }

external inline postMessage : forall<a> (this: messagePort, message: a /* anyArg */, transfer: seqence) -> dom ()
{ inline "#1.postMessage(#2, #3)" }

external inline start : (this: messagePort) -> dom ()
{ inline "#1.start()" }

external inline close : (this: messagePort) -> dom ()
{ inline "#1.close()" }

external inline onmessage : (this: messagePort) -> dom (event -> dom ())
{ inline "#1.onmessage" }
external inline onmessage : forall<e> (this: messagePort, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
external inline onmessage : forall<e> (this: messagePort, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmessage = #2)" }
// MessagePort implements EventTarget (overloading)
external inline addEventListener : (this: messagePort, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: messagePort, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: messagePort, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: messagePort, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: messagePort, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

// MessagePort implements Transferable (overloading)
