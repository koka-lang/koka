public module sys/dom/document

// Interface Document (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeDocument  : forall<a> (a) -> maybe<document>
{ inline "(#1.toString()==='[object Document]'?std_core.Just(#1):std_core.Nothing)" }
external inline toDocument : forall<a> (a) -> exn document
{ inline "(#1.toString()==='[object Document]'?#1:std_core.error('toDocument: cast failed'))" }


// Document implements Document (supplemental)
external inline implementation : (this: document) -> dom domImplementation
{ inline "#1.implementation" }
external inline documentUri : (this: document) -> dom string
{ inline "#1.documentURI" }
external inline documentUri : (this: document, assigned: string) -> dom ()
{ inline "(#1.documentURI = #2)" }
external inline compatMode : (this: document) -> dom string
{ inline "#1.compatMode" }
external inline charset : (this: document) -> dom string
{ inline "#1.charset" }
external inline charset : (this: document, assigned: string) -> dom ()
{ inline "(#1.charset = #2)" }
external inline characterSet : (this: document) -> dom string
{ inline "#1.characterSet" }
external inline defaultCharset : (this: document) -> dom string
{ inline "#1.defaultCharset" }
external inline contentType : (this: document) -> dom string
{ inline "#1.contentType" }
external inline doctype : (this: document) -> dom documentType
{ inline "#1.doctype" }
external inline documentElement : (this: document) -> dom element
{ inline "#1.documentElement" }
external inline getElementsByTagName : (this: document, qualifiedName: string) -> dom nodeList
{ inline "#1.getElementsByTagName(#2)" }

external inline getElementsByTagNameNs : (this: document, namespace: string, localName: string) -> dom nodeList
{ inline "#1.getElementsByTagNameNS(#2, #3)" }

external inline getElementsByClassName : (this: document, classNames: string) -> dom nodeList
{ inline "#1.getElementsByClassName(#2)" }

external inline getElementById : (this: document, elementId: string) -> dom element
{ inline "#1.getElementById(#2)" }

external inline createElement : (this: document, localName: string) -> dom element
{ inline "#1.createElement(#2)" }

external inline createElementNs : (this: document, namespace: string, qualifiedName: string) -> dom element
{ inline "#1.createElementNS(#2, #3)" }

external inline createDocumentFragment : (this: document) -> dom documentFragment
{ inline "#1.createDocumentFragment()" }

external inline createTextNode : (this: document, data: string) -> dom text
{ inline "#1.createTextNode(#2)" }

external inline createComment : (this: document, data: string) -> dom comment
{ inline "#1.createComment(#2)" }

external inline createProcessingInstruction : (this: document, target: string, data: string) -> dom processingInstruction
{ inline "#1.createProcessingInstruction(#2, #3)" }

external inline importNode : (this: document, node: node, deep: bool) -> dom node
{ inline "#1.importNode(#2, #3)" }

external inline adoptNode : (this: document, node: node) -> dom node
{ inline "#1.adoptNode(#2)" }

external inline createEvent : (this: document, eventInterfaceName: string) -> dom event
{ inline "#1.createEvent(#2)" }

// Document implements Document-1 (supplemental)
external inline styleSheets : (this: document) -> dom styleSheetList
{ inline "#1.styleSheets" }
external inline selectedStyleSheetSet : (this: document) -> dom string
{ inline "#1.selectedStyleSheetSet" }
external inline selectedStyleSheetSet : (this: document, assigned: string) -> dom ()
{ inline "(#1.selectedStyleSheetSet = #2)" }
external inline lastStyleSheetSet : (this: document) -> dom string
{ inline "#1.lastStyleSheetSet" }
external inline preferredStyleSheetSet : (this: document) -> dom string
{ inline "#1.preferredStyleSheetSet" }
external inline styleSheetSets : (this: document) -> dom domStringList
{ inline "#1.styleSheetSets" }
external inline enableStyleSheetsForSet : (this: document, name: string) -> dom ()
{ inline "#1.enableStyleSheetsForSet(#2)" }

// Document implements Document (supplemental)
external inline elementFromPoint : (this: document, x: float32, y: float32) -> dom element
{ inline "#1.elementFromPoint(#2, #3)" }

external inline caretPositionFromPoint : (this: document, x: float32, y: float32) -> dom caretPosition
{ inline "#1.caretPositionFromPoint(#2, #3)" }

// Document implements NodeSelector (supplemental)
external inline querySelector : (this: document, selectors: string) -> dom element
{ inline "#1.querySelector(#2)" }

external inline querySelectorAll : (this: document, selectors: string) -> dom nodeList
{ inline "#1.querySelectorAll(#2)" }

// Document implements DocumentCSS (overloading)
external inline getOverrideStyle : (this: document, elt: element, pseudoElt: string) -> dom cssStyleDeclaration
{ inline "#1.getOverrideStyle(#2, #3)" }

// Document implements HTMLDocument (overloading)
external inline location : (this: document) -> dom location
{ inline "#1.location" }
external inline location : (this: document, assigned: location) -> dom ()
{ inline "(#1.location = #2)" }
external inline url : (this: document) -> dom string
{ inline "#1.URL" }
external inline domain : (this: document) -> dom string
{ inline "#1.domain" }
external inline domain : (this: document, assigned: string) -> dom ()
{ inline "(#1.domain = #2)" }
external inline referrer : (this: document) -> dom string
{ inline "#1.referrer" }
external inline cookie : (this: document) -> dom string
{ inline "#1.cookie" }
external inline cookie : (this: document, assigned: string) -> dom ()
{ inline "(#1.cookie = #2)" }
external inline lastModified : (this: document) -> dom string
{ inline "#1.lastModified" }
external inline readyState : (this: document) -> dom string
{ inline "#1.readyState" }
external inline getElement : (this: document, name: string) -> dom any /* anyResult */
{ inline "#1.getElement(#2)" }

external inline title : (this: document) -> dom string
{ inline "#1.title" }
external inline title : (this: document, assigned: string) -> dom ()
{ inline "(#1.title = #2)" }
external inline dir : (this: document) -> dom string
{ inline "#1.dir" }
external inline dir : (this: document, assigned: string) -> dom ()
{ inline "(#1.dir = #2)" }
external inline body : (this: document) -> dom htmlElement
{ inline "#1.body" }
external inline body : (this: document, assigned: htmlElement) -> dom ()
{ inline "(#1.body = #2)" }
external inline head : (this: document) -> dom htmlHeadElement
{ inline "#1.head" }
external inline images : (this: document) -> dom htmlCollection
{ inline "#1.images" }
external inline embeds : (this: document) -> dom htmlCollection
{ inline "#1.embeds" }
external inline plugins : (this: document) -> dom htmlCollection
{ inline "#1.plugins" }
external inline links : (this: document) -> dom htmlCollection
{ inline "#1.links" }
external inline forms : (this: document) -> dom htmlCollection
{ inline "#1.forms" }
external inline scripts : (this: document) -> dom htmlCollection
{ inline "#1.scripts" }
external inline getElementsByName : (this: document, elementName: string) -> dom nodeList
{ inline "#1.getElementsByName(#2)" }

external inline cssElementMap : (this: document) -> dom domElementMap
{ inline "#1.cssElementMap" }
external inline innerHtml : (this: document) -> dom string
{ inline "#1.innerHTML" }
external inline innerHtml : (this: document, assigned: string) -> dom ()
{ inline "(#1.innerHTML = #2)" }
external inline open : (this: document) -> dom htmlDocument
{ inline "#1.open()" }

external inline open : (this: document, type_: string) -> dom htmlDocument
{ inline "#1.open(#2)" }

external inline open : (this: document, type_: string, replace: string) -> dom htmlDocument
{ inline "#1.open(#2, #3)" }

external inline open : (this: document, url: string, name: string, features: string) -> dom windowProxy
{ inline "#1.open(#2, #3, #4)" }

external inline open : (this: document, url: string, name: string, features: string, replace: bool) -> dom windowProxy
{ inline "#1.open(#2, #3, #4, #5)" }

external inline close : (this: document) -> dom ()
{ inline "#1.close()" }

external inline write : (this: document) -> dom ()
{ inline "#1.write()" }

external inline write : (this: document, text: string) -> dom ()
{ inline "#1.write(#2)" }

external inline writeln : (this: document) -> dom ()
{ inline "#1.writeln()" }

external inline writeln : (this: document, text: string) -> dom ()
{ inline "#1.writeln(#2)" }

external inline defaultView : (this: document) -> dom windowProxy
{ inline "#1.defaultView" }
external inline activeElement : (this: document) -> dom element
{ inline "#1.activeElement" }
external inline hasFocus : (this: document) -> dom bool
{ inline "#1.hasFocus()" }

external inline designMode : (this: document) -> dom string
{ inline "#1.designMode" }
external inline designMode : (this: document, assigned: string) -> dom ()
{ inline "(#1.designMode = #2)" }
external inline execCommand : (this: document, commandId: string) -> dom bool
{ inline "#1.execCommand(#2)" }

external inline execCommand : (this: document, commandId: string, showUi: bool) -> dom bool
{ inline "#1.execCommand(#2, #3)" }

external inline execCommand : (this: document, commandId: string, showUi: bool, value: string) -> dom bool
{ inline "#1.execCommand(#2, #3, #4)" }

external inline queryCommandEnabled : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandEnabled(#2)" }

external inline queryCommandIndeterm : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandIndeterm(#2)" }

external inline queryCommandState : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandState(#2)" }

external inline queryCommandSupported : (this: document, commandId: string) -> dom bool
{ inline "#1.queryCommandSupported(#2)" }

external inline queryCommandValue : (this: document, commandId: string) -> dom string
{ inline "#1.queryCommandValue(#2)" }

external inline commands : (this: document) -> dom htmlCollection
{ inline "#1.commands" }
external inline onabort : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
external inline onabort : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onabort : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onblur : (this: document) -> dom (focusEvent -> dom ())
{ inline "#1.onblur" }
external inline onblur : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
external inline onblur : forall<e> (this: document, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onblur = #2)" }
external inline oncanplay : (this: document) -> dom (event -> dom ())
{ inline "#1.oncanplay" }
external inline oncanplay : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
external inline oncanplay : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplay = #2)" }
external inline oncanplaythrough : (this: document) -> dom (event -> dom ())
{ inline "#1.oncanplaythrough" }
external inline oncanplaythrough : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
external inline oncanplaythrough : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncanplaythrough = #2)" }
external inline onchange : (this: document) -> dom (event -> dom ())
{ inline "#1.onchange" }
external inline onchange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
external inline onchange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onchange = #2)" }
external inline onclick : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onclick" }
external inline onclick : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
external inline onclick : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onclick = #2)" }
external inline oncontextmenu : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.oncontextmenu" }
external inline oncontextmenu : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
external inline oncontextmenu : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncontextmenu = #2)" }
external inline oncuechange : (this: document) -> dom (event -> dom ())
{ inline "#1.oncuechange" }
external inline oncuechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
external inline oncuechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oncuechange = #2)" }
external inline ondblclick : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.ondblclick" }
external inline ondblclick : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
external inline ondblclick : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondblclick = #2)" }
external inline ondrag : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondrag" }
external inline ondrag : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
external inline ondrag : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrag = #2)" }
external inline ondragend : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragend" }
external inline ondragend : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
external inline ondragend : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragend = #2)" }
external inline ondragenter : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragenter" }
external inline ondragenter : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
external inline ondragenter : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragenter = #2)" }
external inline ondragleave : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragleave" }
external inline ondragleave : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
external inline ondragleave : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragleave = #2)" }
external inline ondragover : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragover" }
external inline ondragover : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
external inline ondragover : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragover = #2)" }
external inline ondragstart : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondragstart" }
external inline ondragstart : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
external inline ondragstart : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondragstart = #2)" }
external inline ondrop : (this: document) -> dom (dragEvent -> dom ())
{ inline "#1.ondrop" }
external inline ondrop : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
external inline ondrop : forall<e> (this: document, assigned: (dragEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondrop = #2)" }
external inline ondurationchange : (this: document) -> dom (event -> dom ())
{ inline "#1.ondurationchange" }
external inline ondurationchange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
external inline ondurationchange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ondurationchange = #2)" }
external inline onemptied : (this: document) -> dom (event -> dom ())
{ inline "#1.onemptied" }
external inline onemptied : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
external inline onemptied : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onemptied = #2)" }
external inline onended : (this: document) -> dom (event -> dom ())
{ inline "#1.onended" }
external inline onended : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
external inline onended : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onended = #2)" }
external inline onerror : (this: document) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onfocus : (this: document) -> dom (focusEvent -> dom ())
{ inline "#1.onfocus" }
external inline onfocus : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
external inline onfocus : forall<e> (this: document, assigned: (focusEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onfocus = #2)" }
external inline oninput : (this: document) -> dom (event -> dom ())
{ inline "#1.oninput" }
external inline oninput : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
external inline oninput : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninput = #2)" }
external inline oninvalid : (this: document) -> dom (event -> dom ())
{ inline "#1.oninvalid" }
external inline oninvalid : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
external inline oninvalid : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.oninvalid = #2)" }
external inline onkeydown : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeydown" }
external inline onkeydown : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
external inline onkeydown : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeydown = #2)" }
external inline onkeypress : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeypress" }
external inline onkeypress : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
external inline onkeypress : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeypress = #2)" }
external inline onkeyup : (this: document) -> dom (keyboardEvent -> dom ())
{ inline "#1.onkeyup" }
external inline onkeyup : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
external inline onkeyup : forall<e> (this: document, assigned: (keyboardEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onkeyup = #2)" }
external inline onload : (this: document) -> dom (event -> dom ())
{ inline "#1.onload" }
external inline onload : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onload : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onloadeddata : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadeddata" }
external inline onloadeddata : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
external inline onloadeddata : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadeddata = #2)" }
external inline onloadedmetadata : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadedmetadata" }
external inline onloadedmetadata : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
external inline onloadedmetadata : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadedmetadata = #2)" }
external inline onloadstart : (this: document) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
external inline onloadstart : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onloadstart : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onmousedown : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousedown" }
external inline onmousedown : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
external inline onmousedown : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousedown = #2)" }
external inline onmousemove : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmousemove" }
external inline onmousemove : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
external inline onmousemove : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousemove = #2)" }
external inline onmouseout : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseout" }
external inline onmouseout : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
external inline onmouseout : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseout = #2)" }
external inline onmouseover : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseover" }
external inline onmouseover : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
external inline onmouseover : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseover = #2)" }
external inline onmouseup : (this: document) -> dom (mouseEvent -> dom ())
{ inline "#1.onmouseup" }
external inline onmouseup : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
external inline onmouseup : forall<e> (this: document, assigned: (mouseEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmouseup = #2)" }
external inline onmousewheel : (this: document) -> dom (wheelEvent -> dom ())
{ inline "#1.onmousewheel" }
external inline onmousewheel : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
external inline onmousewheel : forall<e> (this: document, assigned: (wheelEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onmousewheel = #2)" }
external inline onpause : (this: document) -> dom (event -> dom ())
{ inline "#1.onpause" }
external inline onpause : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
external inline onpause : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onpause = #2)" }
external inline onplay : (this: document) -> dom (event -> dom ())
{ inline "#1.onplay" }
external inline onplay : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
external inline onplay : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplay = #2)" }
external inline onplaying : (this: document) -> dom (event -> dom ())
{ inline "#1.onplaying" }
external inline onplaying : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
external inline onplaying : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onplaying = #2)" }
external inline onprogress : (this: document) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
external inline onprogress : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onprogress : forall<e> (this: document, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onratechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onratechange" }
external inline onratechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
external inline onratechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onratechange = #2)" }
external inline onreadystatechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onreadystatechange" }
external inline onreadystatechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
external inline onreadystatechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
external inline onreset : (this: document) -> dom (event -> dom ())
{ inline "#1.onreset" }
external inline onreset : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
external inline onreset : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreset = #2)" }
external inline onscroll : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onscroll" }
external inline onscroll : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
external inline onscroll : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onscroll = #2)" }
external inline onseeked : (this: document) -> dom (event -> dom ())
{ inline "#1.onseeked" }
external inline onseeked : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
external inline onseeked : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeked = #2)" }
external inline onseeking : (this: document) -> dom (event -> dom ())
{ inline "#1.onseeking" }
external inline onseeking : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
external inline onseeking : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onseeking = #2)" }
external inline onselect : (this: document) -> dom (uiEvent -> dom ())
{ inline "#1.onselect" }
external inline onselect : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
external inline onselect : forall<e> (this: document, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onselect = #2)" }
external inline onshow : (this: document) -> dom (event -> dom ())
{ inline "#1.onshow" }
external inline onshow : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
external inline onshow : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onshow = #2)" }
external inline onstalled : (this: document) -> dom (event -> dom ())
{ inline "#1.onstalled" }
external inline onstalled : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
external inline onstalled : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onstalled = #2)" }
external inline onsubmit : (this: document) -> dom (event -> dom ())
{ inline "#1.onsubmit" }
external inline onsubmit : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
external inline onsubmit : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsubmit = #2)" }
external inline onsuspend : (this: document) -> dom (event -> dom ())
{ inline "#1.onsuspend" }
external inline onsuspend : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
external inline onsuspend : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onsuspend = #2)" }
external inline ontimeupdate : (this: document) -> dom (event -> dom ())
{ inline "#1.ontimeupdate" }
external inline ontimeupdate : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
external inline ontimeupdate : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeupdate = #2)" }
external inline onvolumechange : (this: document) -> dom (event -> dom ())
{ inline "#1.onvolumechange" }
external inline onvolumechange : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
external inline onvolumechange : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onvolumechange = #2)" }
external inline onwaiting : (this: document) -> dom (event -> dom ())
{ inline "#1.onwaiting" }
external inline onwaiting : forall<e> (this: document, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
external inline onwaiting : forall<e> (this: document, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onwaiting = #2)" }
// Document implements HTMLDocument-34 (overloading)
external inline fgColor : (this: document) -> dom string
{ inline "#1.fgColor" }
external inline fgColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.fgColor = #2)" }
external inline bgColor : (this: document) -> dom string
{ inline "#1.bgColor" }
external inline bgColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.bgColor = #2)" }
external inline linkColor : (this: document) -> dom string
{ inline "#1.linkColor" }
external inline linkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.linkColor = #2)" }
external inline vlinkColor : (this: document) -> dom string
{ inline "#1.vlinkColor" }
external inline vlinkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.vlinkColor = #2)" }
external inline alinkColor : (this: document) -> dom string
{ inline "#1.alinkColor" }
external inline alinkColor : (this: document, assigned: string) -> dom ()
{ inline "(#1.alinkColor = #2)" }
external inline anchors : (this: document) -> dom htmlCollection
{ inline "#1.anchors" }
external inline applets : (this: document) -> dom htmlCollection
{ inline "#1.applets" }
external inline clear : (this: document) -> dom ()
{ inline "#1.clear()" }

external inline all : (this: document) -> dom htmlAllCollection
{ inline "#1.all" }
// Document implements DocumentRange (overloading)
external inline createRange : (this: document) -> dom range
{ inline "#1.createRange()" }

// Document implements DocumentTraversal (overloading)
external inline createNodeIterator : (this: document, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom nodeIterator
{ inline "#1.createNodeIterator(#2, #3, #4, #5)" }

external inline createTreeWalker : (this: document, root: node, whatToShow: uint32, filter: nodeFilter, entityReferenceExpansion: bool) -> dom treeWalker
{ inline "#1.createTreeWalker(#2, #3, #4, #5)" }

// Document extends Node
external inline node : (document) -> node // upcasting to extended type
{ inline "#1" }
// Document implements in extension Node (overloading)
external inline nodeType : (this: document) -> dom nodeType
{ inline "#1.nodeType" }
external inline nodeName : (this: document) -> dom string
{ inline "#1.nodeName" }
external inline baseUri : (this: document) -> dom string
{ inline "#1.baseURI" }
external inline ownerDocument : (this: document) -> dom document
{ inline "#1.ownerDocument" }
external inline parentNode : (this: document) -> dom node
{ inline "#1.parentNode" }
external inline parentElement : (this: document) -> dom element
{ inline "#1.parentElement" }
external inline hasChildNodes : (this: document) -> dom bool
{ inline "#1.hasChildNodes()" }

external inline childNodes : (this: document) -> dom nodeList
{ inline "#1.childNodes" }
external inline firstChild : (this: document) -> dom node
{ inline "#1.firstChild" }
external inline lastChild : (this: document) -> dom node
{ inline "#1.lastChild" }
external inline previousSibling : (this: document) -> dom node
{ inline "#1.previousSibling" }
external inline nextSibling : (this: document) -> dom node
{ inline "#1.nextSibling" }
external inline compareDocumentPosition : (this: document, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

external inline nodeValue : (this: document) -> dom string
{ inline "#1.nodeValue" }
external inline nodeValue : (this: document, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
external inline textContent : (this: document) -> dom string
{ inline "#1.textContent" }
external inline textContent : (this: document, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
external inline insertBefore : (this: document, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

external inline replaceChild : (this: document, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

external inline removeChild : (this: document, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

external inline appendChild : (this: document, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

external inline cloneNode : (this: document, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

external inline isSameNode : (this: document, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

external inline isEqualNode : (this: document, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

external inline lookupPrefix : (this: document, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

external inline lookupNamespaceUri : (this: document, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

external inline isDefaultNamespace : (this: document, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// Document extends EventTarget
external inline eventTarget : (document) -> eventTarget // upcasting to extended type
{ inline "#1" }
// Document implements in extension EventTarget (overloading)
external inline addEventListener : (this: document, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: document, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: document, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: document, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: document, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

