public module sys/dom/traversal/nodeIterator

// Interface NodeIterator (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeNodeIterator  : forall<a> (a) -> maybe<nodeIterator>
{ inline "(#1.toString()==='[object NodeIterator]'?std_core.Just(#1):std_core.Nothing)" }
external inline toNodeIterator : forall<a> (a) -> exn nodeIterator
{ inline "(#1.toString()==='[object NodeIterator]'?#1:std_core.error('toNodeIterator: cast failed'))" }


// NodeIterator implements NodeIterator (supplemental)
external inline root : (this: nodeIterator) -> dom node
{ inline "#1.root" }
external inline whatToShow : (this: nodeIterator) -> dom uint32
{ inline "#1.whatToShow" }
external inline filter : (this: nodeIterator) -> dom nodeFilter
{ inline "#1.filter" }
external inline expandEntityReferences : (this: nodeIterator) -> dom bool
{ inline "#1.expandEntityReferences" }
external inline nextNode : (this: nodeIterator) -> dom node
{ inline "#1.nextNode()" }

external inline previousNode : (this: nodeIterator) -> dom node
{ inline "#1.previousNode()" }

external inline detach : (this: nodeIterator) -> dom ()
{ inline "#1.detach()" }

