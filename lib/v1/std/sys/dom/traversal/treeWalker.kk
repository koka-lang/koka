public module sys/dom/traversal/treeWalker

// Interface TreeWalker (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeTreeWalker  : forall<a> (a) -> maybe<treeWalker>
{ inline "(#1.toString()==='[object TreeWalker]'?std_core.Just(#1):std_core.Nothing)" }
external inline toTreeWalker : forall<a> (a) -> exn treeWalker
{ inline "(#1.toString()==='[object TreeWalker]'?#1:std_core.error('toTreeWalker: cast failed'))" }


// TreeWalker implements TreeWalker (supplemental)
external inline root : (this: treeWalker) -> dom node
{ inline "#1.root" }
external inline whatToShow : (this: treeWalker) -> dom uint32
{ inline "#1.whatToShow" }
external inline filter : (this: treeWalker) -> dom nodeFilter
{ inline "#1.filter" }
external inline expandEntityReferences : (this: treeWalker) -> dom bool
{ inline "#1.expandEntityReferences" }
external inline currentNode : (this: treeWalker) -> dom node
{ inline "#1.currentNode" }
external inline currentNode : (this: treeWalker, assigned: node) -> dom ()
{ inline "(#1.currentNode = #2)" }
external inline parentNode : (this: treeWalker) -> dom node
{ inline "#1.parentNode()" }

external inline firstChild : (this: treeWalker) -> dom node
{ inline "#1.firstChild()" }

external inline lastChild : (this: treeWalker) -> dom node
{ inline "#1.lastChild()" }

external inline previousSibling : (this: treeWalker) -> dom node
{ inline "#1.previousSibling()" }

external inline nextSibling : (this: treeWalker) -> dom node
{ inline "#1.nextSibling()" }

external inline previousNode : (this: treeWalker) -> dom node
{ inline "#1.previousNode()" }

external inline nextNode : (this: treeWalker) -> dom node
{ inline "#1.nextNode()" }

