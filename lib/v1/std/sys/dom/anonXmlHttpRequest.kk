public module sys/dom/anonXmlHttpRequest

// Interface AnonXMLHttpRequest (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeAnonXmlHttpRequest  : forall<a> (a) -> maybe<anonXmlHttpRequest>
{ inline "(#1.toString()==='[object AnonXMLHttpRequest]'?std_core.Just(#1):std_core.Nothing)" }
external inline toAnonXmlHttpRequest : forall<a> (a) -> exn anonXmlHttpRequest
{ inline "(#1.toString()==='[object AnonXMLHttpRequest]'?#1:std_core.error('toAnonXmlHttpRequest: cast failed'))" }


// AnonXMLHttpRequest implements AnonXMLHttpRequest (supplemental)
// AnonXMLHttpRequest extends XMLHttpRequest
external inline xmlHttpRequest : (anonXmlHttpRequest) -> xmlHttpRequest // upcasting to extended type
{ inline "#1" }
// AnonXMLHttpRequest implements in extension XMLHttpRequest (overloading)
external inline onreadystatechange : (this: anonXmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onreadystatechange" }
external inline onreadystatechange : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
external inline onreadystatechange : forall<e> (this: anonXmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onreadystatechange = #2)" }
external inline readyState : (this: anonXmlHttpRequest) -> dom xmlHttpRequestReadyState
{ inline "#1.readyState" }
external inline open : (this: anonXmlHttpRequest, method: string, url: string) -> dom ()
{ inline "#1.open(#2, #3)" }

external inline open : (this: anonXmlHttpRequest, method: string, url: string, async: bool) -> dom ()
{ inline "#1.open(#2, #3, #4)" }

external inline open : (this: anonXmlHttpRequest, method: string, url: string, async: bool, user: string) -> dom ()
{ inline "#1.open(#2, #3, #4, #5)" }

external inline open : (this: anonXmlHttpRequest, method: string, url: string, async: bool, user: string, password: string) -> dom ()
{ inline "#1.open(#2, #3, #4, #5, #6)" }

external inline setRequestHeader : (this: anonXmlHttpRequest, header: string, value: string) -> dom ()
{ inline "#1.setRequestHeader(#2, #3)" }

external inline timeout : (this: anonXmlHttpRequest) -> dom uint32
{ inline "#1.timeout" }
external inline timeout : (this: anonXmlHttpRequest, assigned: uint32) -> dom ()
{ inline "(#1.timeout = #2)" }
external inline withCredentials : (this: anonXmlHttpRequest) -> dom bool
{ inline "#1.withCredentials" }
external inline withCredentials : (this: anonXmlHttpRequest, assigned: bool) -> dom ()
{ inline "(#1.withCredentials = #2)" }
external inline upload : (this: anonXmlHttpRequest) -> dom xmlHttpRequestUpload
{ inline "#1.upload" }
external inline send : (this: anonXmlHttpRequest) -> dom ()
{ inline "#1.send()" }

external inline send : (this: anonXmlHttpRequest, data: arrayBuffer) -> dom ()
{ inline "#1.send(#2)" }

external inline send : (this: anonXmlHttpRequest, data: blob) -> dom ()
{ inline "#1.send(#2)" }

external inline send : (this: anonXmlHttpRequest, data: document) -> dom ()
{ inline "#1.send(#2)" }

external inline send : (this: anonXmlHttpRequest, data: formData) -> dom ()
{ inline "#1.send(#2)" }

external inline send : (this: anonXmlHttpRequest, data: string) -> dom ()
{ inline "#1.send(#2)" }

external inline abort : (this: anonXmlHttpRequest) -> dom ()
{ inline "#1.abort()" }

external inline status : (this: anonXmlHttpRequest) -> dom xmlHttpRequestReadyState
{ inline "#1.status" }
external inline statusText : (this: anonXmlHttpRequest) -> dom string
{ inline "#1.statusText" }
external inline getResponseHeader : (this: anonXmlHttpRequest, header: string) -> dom string
{ inline "#1.getResponseHeader(#2)" }

external inline getAllResponseHeaders : (this: anonXmlHttpRequest) -> dom string
{ inline "#1.getAllResponseHeaders()" }

external inline overrideMimeType : (this: anonXmlHttpRequest, mime: string) -> dom ()
{ inline "#1.overrideMimeType(#2)" }

external inline responseType : (this: anonXmlHttpRequest) -> dom string
{ inline "#1.responseType" }
external inline responseType : (this: anonXmlHttpRequest, assigned: string) -> dom ()
{ inline "(#1.responseType = #2)" }
external inline response : (this: anonXmlHttpRequest) -> dom any /* anyGetter */
{ inline "#1.response" }
external inline responseText : (this: anonXmlHttpRequest) -> dom string
{ inline "#1.responseText" }
external inline responseXml : (this: anonXmlHttpRequest) -> dom document
{ inline "#1.responseXML" }
// AnonXMLHttpRequest extends XMLHttpRequestEventTarget
external inline xmlHttpRequestEventTarget : (anonXmlHttpRequest) -> xmlHttpRequestEventTarget // upcasting to extended type
{ inline "#1" }
// AnonXMLHttpRequest implements in extension XMLHttpRequestEventTarget (overloading)
external inline onloadstart : (this: anonXmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
external inline onloadstart : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onloadstart : forall<e> (this: anonXmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onprogress : (this: anonXmlHttpRequest) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
external inline onprogress : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onprogress : forall<e> (this: anonXmlHttpRequest, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onabort : (this: anonXmlHttpRequest) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
external inline onabort : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onabort : forall<e> (this: anonXmlHttpRequest, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onerror : (this: anonXmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: anonXmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onload : (this: anonXmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.onload" }
external inline onload : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onload : forall<e> (this: anonXmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline ontimeout : (this: anonXmlHttpRequest) -> dom (event -> dom ())
{ inline "#1.ontimeout" }
external inline ontimeout : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
external inline ontimeout : forall<e> (this: anonXmlHttpRequest, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.ontimeout = #2)" }
external inline onloadend : (this: anonXmlHttpRequest) -> dom (progressEvent -> dom ())
{ inline "#1.onloadend" }
external inline onloadend : forall<e> (this: anonXmlHttpRequest, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
external inline onloadend : forall<e> (this: anonXmlHttpRequest, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
// AnonXMLHttpRequest extends EventTarget
external inline eventTarget : (anonXmlHttpRequest) -> eventTarget // upcasting to extended type
{ inline "#1" }
// AnonXMLHttpRequest implements in extension EventTarget (overloading)
external inline addEventListener : (this: anonXmlHttpRequest, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: anonXmlHttpRequest, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: anonXmlHttpRequest, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: anonXmlHttpRequest, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: anonXmlHttpRequest, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

