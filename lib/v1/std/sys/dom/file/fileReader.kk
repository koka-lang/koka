public module sys/dom/file/fileReader

// Interface FileReader (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeFileReader  : forall<a> (a) -> maybe<fileReader>
{ inline "(#1.toString()==='[object FileReader]'?std_core.Just(#1):std_core.Nothing)" }
external inline toFileReader : forall<a> (a) -> exn fileReader
{ inline "(#1.toString()==='[object FileReader]'?#1:std_core.error('toFileReader: cast failed'))" }


// FileReader implements FileReader (supplemental)
external inline readAsArrayBuffer : (this: fileReader, blob: blob) -> dom ()
{ inline "#1.readAsArrayBuffer(#2)" }

external inline readAsBinaryString : (this: fileReader, blob: blob) -> dom ()
{ inline "#1.readAsBinaryString(#2)" }

external inline readAsText : (this: fileReader, blob: blob) -> dom ()
{ inline "#1.readAsText(#2)" }

external inline readAsText : (this: fileReader, blob: blob, encoding: string) -> dom ()
{ inline "#1.readAsText(#2, #3)" }

external inline readAsDataUrl : (this: fileReader, blob: blob) -> dom ()
{ inline "#1.readAsDataURL(#2)" }

external inline abort : (this: fileReader) -> dom ()
{ inline "#1.abort()" }

external inline readyState : (this: fileReader) -> dom fileReaderReadyState
{ inline "#1.readyState" }
external inline result : (this: fileReader) -> dom any /* anyGetter */
{ inline "#1.result" }
external inline error : (this: fileReader) -> dom fileError
{ inline "#1.error" }
external inline onloadstart : (this: fileReader) -> dom (event -> dom ())
{ inline "#1.onloadstart" }
external inline onloadstart : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onloadstart : forall<e> (this: fileReader, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadstart = #2)" }
external inline onprogress : (this: fileReader) -> dom (progressEvent -> dom ())
{ inline "#1.onprogress" }
external inline onprogress : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onprogress : forall<e> (this: fileReader, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onprogress = #2)" }
external inline onload : (this: fileReader) -> dom (event -> dom ())
{ inline "#1.onload" }
external inline onload : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onload : forall<e> (this: fileReader, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onload = #2)" }
external inline onabort : (this: fileReader) -> dom (uiEvent -> dom ())
{ inline "#1.onabort" }
external inline onabort : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onabort : forall<e> (this: fileReader, assigned: (uiEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onabort = #2)" }
external inline onerror : (this: fileReader) -> dom (event -> dom ())
{ inline "#1.onerror" }
external inline onerror : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onerror : forall<e> (this: fileReader, assigned: (event) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onerror = #2)" }
external inline onloadend : (this: fileReader) -> dom (progressEvent -> dom ())
{ inline "#1.onloadend" }
external inline onloadend : forall<e> (this: fileReader, assigned: () -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
external inline onloadend : forall<e> (this: fileReader, assigned: (progressEvent) -> <dom|e> ()) -> <dom|e> ()
{ inline "(#1.onloadend = #2)" }
// FileReader extends EventTarget
external inline eventTarget : (fileReader) -> eventTarget // upcasting to extended type
{ inline "#1" }
// FileReader implements in extension EventTarget (overloading)
external inline addEventListener : (this: fileReader, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: fileReader, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: fileReader, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: fileReader, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: fileReader, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

