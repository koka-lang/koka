public module sys/dom/domSettableTokenList

// Interface DOMSettableTokenList (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeDomSettableTokenList  : forall<a> (a) -> maybe<domSettableTokenList>
{ inline "(#1.toString()==='[object DOMSettableTokenList]'?std_core.Just(#1):std_core.Nothing)" }
external inline toDomSettableTokenList : forall<a> (a) -> exn domSettableTokenList
{ inline "(#1.toString()==='[object DOMSettableTokenList]'?#1:std_core.error('toDomSettableTokenList: cast failed'))" }


// DOMSettableTokenList implements DOMSettableTokenList (supplemental)
external inline value : (this: domSettableTokenList) -> dom string
{ inline "#1.value" }
external inline value : (this: domSettableTokenList, assigned: string) -> dom ()
{ inline "(#1.value = #2)" }
// DOMSettableTokenList extends DOMTokenList
external inline domTokenList : (domSettableTokenList) -> domTokenList // upcasting to extended type
{ inline "#1" }
// DOMSettableTokenList implements in extension DOMTokenList (overloading)
external inline length : (this: domSettableTokenList) -> dom uint32
{ inline "#1.length" }
external inline item : (this: domSettableTokenList, index: uint32) -> dom string
{ inline "#1.item(#2)" }

external inline contains : (this: domSettableTokenList, token: string) -> dom bool
{ inline "#1.contains(#2)" }

external inline add : (this: domSettableTokenList, token: string) -> dom ()
{ inline "#1.add(#2)" }

external inline remove : (this: domSettableTokenList, token: string) -> dom ()
{ inline "#1.remove(#2)" }

external inline toggle : (this: domSettableTokenList, token: string) -> dom bool
{ inline "#1.toggle(#2)" }

external inline toString : (this: domSettableTokenList) -> dom string
{ inline "#1.toString()" }

