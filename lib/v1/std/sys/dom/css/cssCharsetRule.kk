public module sys/dom/css/cssCharsetRule

// Interface CSSCharsetRule (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCssCharsetRule  : forall<a> (a) -> maybe<cssCharsetRule>
{ inline "(#1.toString()==='[object CSSCharsetRule]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCssCharsetRule : forall<a> (a) -> exn cssCharsetRule
{ inline "(#1.toString()==='[object CSSCharsetRule]'?#1:std_core.error('toCssCharsetRule: cast failed'))" }


// CSSCharsetRule implements CSSCharsetRule (supplemental)
external inline encoding : (this: cssCharsetRule) -> dom string
{ inline "#1.encoding" }
external inline encoding : (this: cssCharsetRule, assigned: string) -> dom ()
{ inline "(#1.encoding = #2)" }
// CSSCharsetRule extends CSSRule
external inline cssRule : (cssCharsetRule) -> cssRule // upcasting to extended type
{ inline "#1" }
// CSSCharsetRule implements in extension CSSRule (overloading)
external inline type_ : (this: cssCharsetRule) -> dom cssRuleType
{ inline "#1.type" }
external inline cssText : (this: cssCharsetRule) -> dom string
{ inline "#1.cssText" }
external inline cssText : (this: cssCharsetRule, assigned: string) -> dom ()
{ inline "(#1.cssText = #2)" }
external inline parentRule : (this: cssCharsetRule) -> dom cssRule
{ inline "#1.parentRule" }
external inline parentStyleSheet : (this: cssCharsetRule) -> dom cssStyleSheet
{ inline "#1.parentStyleSheet" }
