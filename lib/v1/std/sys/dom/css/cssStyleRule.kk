public module sys/dom/css/cssStyleRule

// Interface CSSStyleRule (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCssStyleRule  : forall<a> (a) -> maybe<cssStyleRule>
{ inline "(#1.toString()==='[object CSSStyleRule]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCssStyleRule : forall<a> (a) -> exn cssStyleRule
{ inline "(#1.toString()==='[object CSSStyleRule]'?#1:std_core.error('toCssStyleRule: cast failed'))" }


// CSSStyleRule implements CSSStyleRule (supplemental)
external inline selectorText : (this: cssStyleRule) -> dom string
{ inline "#1.selectorText" }
external inline selectorText : (this: cssStyleRule, assigned: string) -> dom ()
{ inline "(#1.selectorText = #2)" }
external inline style : (this: cssStyleRule) -> dom cssStyleDeclaration
{ inline "#1.style" }
// CSSStyleRule extends CSSRule
external inline cssRule : (cssStyleRule) -> cssRule // upcasting to extended type
{ inline "#1" }
// CSSStyleRule implements in extension CSSRule (overloading)
external inline type_ : (this: cssStyleRule) -> dom cssRuleType
{ inline "#1.type" }
external inline cssText : (this: cssStyleRule) -> dom string
{ inline "#1.cssText" }
external inline cssText : (this: cssStyleRule, assigned: string) -> dom ()
{ inline "(#1.cssText = #2)" }
external inline parentRule : (this: cssStyleRule) -> dom cssRule
{ inline "#1.parentRule" }
external inline parentStyleSheet : (this: cssStyleRule) -> dom cssStyleSheet
{ inline "#1.parentStyleSheet" }
