public module sys/dom/css/cssMediaRule

// Interface CSSMediaRule (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCssMediaRule  : forall<a> (a) -> maybe<cssMediaRule>
{ inline "(#1.toString()==='[object CSSMediaRule]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCssMediaRule : forall<a> (a) -> exn cssMediaRule
{ inline "(#1.toString()==='[object CSSMediaRule]'?#1:std_core.error('toCssMediaRule: cast failed'))" }


// CSSMediaRule implements CSSMediaRule (supplemental)
external inline media : (this: cssMediaRule) -> dom mediaList
{ inline "#1.media" }
external inline media : (this: cssMediaRule, assigned: mediaList) -> dom ()
{ inline "(#1.media = #2)" }
external inline cssRules : (this: cssMediaRule) -> dom cssRuleList
{ inline "#1.cssRules" }
external inline insertRule : (this: cssMediaRule, rule: string, index: uint32) -> dom uint32
{ inline "#1.insertRule(#2, #3)" }

external inline deleteRule : (this: cssMediaRule, index: uint32) -> dom ()
{ inline "#1.deleteRule(#2)" }

// CSSMediaRule extends CSSRule
external inline cssRule : (cssMediaRule) -> cssRule // upcasting to extended type
{ inline "#1" }
// CSSMediaRule implements in extension CSSRule (overloading)
external inline type_ : (this: cssMediaRule) -> dom cssRuleType
{ inline "#1.type" }
external inline cssText : (this: cssMediaRule) -> dom string
{ inline "#1.cssText" }
external inline cssText : (this: cssMediaRule, assigned: string) -> dom ()
{ inline "(#1.cssText = #2)" }
external inline parentRule : (this: cssMediaRule) -> dom cssRule
{ inline "#1.parentRule" }
external inline parentStyleSheet : (this: cssMediaRule) -> dom cssStyleSheet
{ inline "#1.parentStyleSheet" }
