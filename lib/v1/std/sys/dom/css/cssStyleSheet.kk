public module sys/dom/css/cssStyleSheet

// Interface CSSStyleSheet (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCssStyleSheet  : forall<a> (a) -> maybe<cssStyleSheet>
{ inline "(#1.toString()==='[object CSSStyleSheet]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCssStyleSheet : forall<a> (a) -> exn cssStyleSheet
{ inline "(#1.toString()==='[object CSSStyleSheet]'?#1:std_core.error('toCssStyleSheet: cast failed'))" }


// CSSStyleSheet implements CSSStyleSheet (supplemental)
external inline ownerRule : (this: cssStyleSheet) -> dom cssRule
{ inline "#1.ownerRule" }
external inline cssRules : (this: cssStyleSheet) -> dom cssRuleList
{ inline "#1.cssRules" }
external inline insertRule : (this: cssStyleSheet, rule: string, index: uint32) -> dom uint32
{ inline "#1.insertRule(#2, #3)" }

external inline deleteRule : (this: cssStyleSheet, index: uint32) -> dom ()
{ inline "#1.deleteRule(#2)" }

// CSSStyleSheet extends StyleSheet
external inline styleSheet : (cssStyleSheet) -> styleSheet // upcasting to extended type
{ inline "#1" }
// CSSStyleSheet implements in extension StyleSheet (overloading)
external inline type_ : (this: cssStyleSheet) -> dom string
{ inline "#1.type" }
external inline href : (this: cssStyleSheet) -> dom string
{ inline "#1.href" }
external inline ownerNode : (this: cssStyleSheet) -> dom node
{ inline "#1.ownerNode" }
external inline parentStyleSheet : (this: cssStyleSheet) -> dom styleSheet
{ inline "#1.parentStyleSheet" }
external inline title : (this: cssStyleSheet) -> dom string
{ inline "#1.title" }
external inline media : (this: cssStyleSheet) -> dom mediaList
{ inline "#1.media" }
external inline media : (this: cssStyleSheet, assigned: mediaList) -> dom ()
{ inline "(#1.media = #2)" }
external inline disabled : (this: cssStyleSheet) -> dom bool
{ inline "#1.disabled" }
external inline disabled : (this: cssStyleSheet, assigned: bool) -> dom ()
{ inline "(#1.disabled = #2)" }
