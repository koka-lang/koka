public module sys/dom/css/cssImportRule

// Interface CSSImportRule (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCssImportRule  : forall<a> (a) -> maybe<cssImportRule>
{ inline "(#1.toString()==='[object CSSImportRule]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCssImportRule : forall<a> (a) -> exn cssImportRule
{ inline "(#1.toString()==='[object CSSImportRule]'?#1:std_core.error('toCssImportRule: cast failed'))" }


// CSSImportRule implements CSSImportRule (supplemental)
external inline href : (this: cssImportRule) -> dom string
{ inline "#1.href" }
external inline media : (this: cssImportRule) -> dom mediaList
{ inline "#1.media" }
external inline media : (this: cssImportRule, assigned: mediaList) -> dom ()
{ inline "(#1.media = #2)" }
external inline styleSheet : (this: cssImportRule) -> dom cssStyleSheet
{ inline "#1.styleSheet" }
// CSSImportRule extends CSSRule
external inline cssRule : (cssImportRule) -> cssRule // upcasting to extended type
{ inline "#1" }
// CSSImportRule implements in extension CSSRule (overloading)
external inline type_ : (this: cssImportRule) -> dom cssRuleType
{ inline "#1.type" }
external inline cssText : (this: cssImportRule) -> dom string
{ inline "#1.cssText" }
external inline cssText : (this: cssImportRule, assigned: string) -> dom ()
{ inline "(#1.cssText = #2)" }
external inline parentRule : (this: cssImportRule) -> dom cssRule
{ inline "#1.parentRule" }
external inline parentStyleSheet : (this: cssImportRule) -> dom cssStyleSheet
{ inline "#1.parentStyleSheet" }
