public module sys/dom/characterData

// Interface CharacterData (generated by esidl 0.2.0).

import sys/dom/types

/* safe and unsafe conversion from all types including `any */
external inline maybeCharacterData  : forall<a> (a) -> maybe<characterData>
{ inline "(#1.toString()==='[object CharacterData]'?std_core.Just(#1):std_core.Nothing)" }
external inline toCharacterData : forall<a> (a) -> exn characterData
{ inline "(#1.toString()==='[object CharacterData]'?#1:std_core.error('toCharacterData: cast failed'))" }


// CharacterData implements CharacterData (supplemental)
external inline data : (this: characterData) -> dom string
{ inline "#1.data" }
external inline data : (this: characterData, assigned: string) -> dom ()
{ inline "(#1.data = #2)" }
external inline length : (this: characterData) -> dom uint32
{ inline "#1.length" }
external inline substringData : (this: characterData, offset: uint32, count: uint32) -> dom string
{ inline "#1.substringData(#2, #3)" }

external inline appendData : (this: characterData, data: string) -> dom ()
{ inline "#1.appendData(#2)" }

external inline insertData : (this: characterData, offset: uint32, data: string) -> dom ()
{ inline "#1.insertData(#2, #3)" }

external inline deleteData : (this: characterData, offset: uint32, count: uint32) -> dom ()
{ inline "#1.deleteData(#2, #3)" }

external inline replaceData : (this: characterData, offset: uint32, count: uint32, data: string) -> dom ()
{ inline "#1.replaceData(#2, #3, #4)" }

// CharacterData extends Node
external inline node : (characterData) -> node // upcasting to extended type
{ inline "#1" }
// CharacterData implements in extension Node (overloading)
external inline nodeType : (this: characterData) -> dom nodeType
{ inline "#1.nodeType" }
external inline nodeName : (this: characterData) -> dom string
{ inline "#1.nodeName" }
external inline baseUri : (this: characterData) -> dom string
{ inline "#1.baseURI" }
external inline ownerDocument : (this: characterData) -> dom document
{ inline "#1.ownerDocument" }
external inline parentNode : (this: characterData) -> dom node
{ inline "#1.parentNode" }
external inline parentElement : (this: characterData) -> dom element
{ inline "#1.parentElement" }
external inline hasChildNodes : (this: characterData) -> dom bool
{ inline "#1.hasChildNodes()" }

external inline childNodes : (this: characterData) -> dom nodeList
{ inline "#1.childNodes" }
external inline firstChild : (this: characterData) -> dom node
{ inline "#1.firstChild" }
external inline lastChild : (this: characterData) -> dom node
{ inline "#1.lastChild" }
external inline previousSibling : (this: characterData) -> dom node
{ inline "#1.previousSibling" }
external inline nextSibling : (this: characterData) -> dom node
{ inline "#1.nextSibling" }
external inline compareDocumentPosition : (this: characterData, other: node) -> dom uint16
{ inline "#1.compareDocumentPosition(#2)" }

external inline nodeValue : (this: characterData) -> dom string
{ inline "#1.nodeValue" }
external inline nodeValue : (this: characterData, assigned: string) -> dom ()
{ inline "(#1.nodeValue = #2)" }
external inline textContent : (this: characterData) -> dom string
{ inline "#1.textContent" }
external inline textContent : (this: characterData, assigned: string) -> dom ()
{ inline "(#1.textContent = #2)" }
external inline insertBefore : (this: characterData, newChild: node, refChild: node) -> dom node
{ inline "#1.insertBefore(#2, #3)" }

external inline replaceChild : (this: characterData, newChild: node, oldChild: node) -> dom node
{ inline "#1.replaceChild(#2, #3)" }

external inline removeChild : (this: characterData, oldChild: node) -> dom node
{ inline "#1.removeChild(#2)" }

external inline appendChild : (this: characterData, newChild: node) -> dom node
{ inline "#1.appendChild(#2)" }

external inline cloneNode : (this: characterData, deep: bool) -> dom node
{ inline "#1.cloneNode(#2)" }

external inline isSameNode : (this: characterData, node: node) -> dom bool
{ inline "#1.isSameNode(#2)" }

external inline isEqualNode : (this: characterData, node: node) -> dom bool
{ inline "#1.isEqualNode(#2)" }

external inline lookupPrefix : (this: characterData, namespace: string) -> dom string
{ inline "#1.lookupPrefix(#2)" }

external inline lookupNamespaceUri : (this: characterData, prefix_: string) -> dom string
{ inline "#1.lookupNamespaceURI(#2)" }

external inline isDefaultNamespace : (this: characterData, namespace: string) -> dom bool
{ inline "#1.isDefaultNamespace(#2)" }

// CharacterData extends EventTarget
external inline eventTarget : (characterData) -> eventTarget // upcasting to extended type
{ inline "#1" }
// CharacterData implements in extension EventTarget (overloading)
external inline addEventListener : (this: characterData, type_: string, listener: eventListener) -> dom ()
{ inline "#1.addEventListener(#2, #3)" }

external inline addEventListener : (this: characterData, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.addEventListener(#2, #3, #4)" }

external inline removeEventListener : (this: characterData, type_: string, listener: eventListener) -> dom ()
{ inline "#1.removeEventListener(#2, #3)" }

external inline removeEventListener : (this: characterData, type_: string, listener: eventListener, capture: bool) -> dom ()
{ inline "#1.removeEventListener(#2, #3, #4)" }

external inline dispatchEvent : (this: characterData, event: event) -> dom bool
{ inline "#1.dispatchEvent(#2)" }

