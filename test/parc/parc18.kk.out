module parc/parc18
private import std/core/types = std/core/types = "";
private import std/core = std/core = "";
public fun test : forall<a> (xs : list<a>, ys : list<a>) -> list<a>
 = fn(xs: list<0>, ys: list<0>){
 match (xs) {
 (std/core/Cons((z: 43), (.pat0: list<0>)) : list<a> )
 -> (match (ys) {
 (std/core/Cons((z0: 43), (.pat2: list<0>)) : list<a> )
 -> (match ((std/core/types/.is-unique(ys))) {
 (std/core/types/True() : bool )
 -> std/core/types/.drop(.pat2);
 std/core/types/();
 std/core/types/.free(ys);
 _
 -> std/core/types/.dup(z0);
 std/core/types/();
 std/core/types/.dec-ref(ys);
 std/core/types/();
 });
 val .ru : reuse
 = std/core/types/no-reuse();
 (match ((std/core/types/.is-unique(xs))) {
 (std/core/types/True() : bool )
 -> std/core/types/.drop(z);
 std/core/types/.drop(.pat0);
 std/core/types/();
 std/core/types/.assign-reuse(.ru, (std/core/types/.reuse(xs)));
 _
 -> std/core/types/();
 std/core/types/.dec-ref(xs);
 std/core/types/();
 });
 std/core/types/.alloc-at(.ru, (std/core/Cons(z0, std/core/Nil)));
 (.skip std/core/Nil() : (list<a>) )
 -> xs;
 });
 (.skip std/core/Nil() : (list<a>) )
 -> ys;
 };
 };
test/parc/parc18.kk(4,23): warning: z shadows an earlier local definition or parameter
test/parc/parc18.kk(3, 5): warning: pattern variable z is unused (or a wrongly spelled constructor?)
 hint: prepend an underscore to make it a wildcard pattern