[01;30moperator branch (.handler) flip: resume normal
[00;39;49m[00m[01;30moperator branch (.handler) fail: resume never
[00;39;49m[00m[01;30moperator branch (hcutfail) cutfail: resume never
[00;39;49m[00m[01;30moperator branch (choices) flip: resume tail
[00;39;49m[00m[01;30moperator branch (choices) fail: resume never
[00;39;49m[00m[01;30moperator branch (solutions) flip: resume scoped
[00;39;49m[00m[01;30moperator branch (solutions) fail: resume never
[00;39;49m[00m[01;30moperator branch (state) get: resume tail
[00;39;49m[00m[01;30moperator branch (state) put: resume tail
[00;39;49m[00m[01;30moperator branch (parse) symbol: resume tail
[00;39;49m[00m[[3],[2,1],[1,2],[1,1,1]]
(state=12, [[3],[2,1],[1,2],[1,1,1]])
[(state=1, [3]),(state=5, [2,1]),(state=5, [1,2]),(state=9, [1,1,1])]
[[3]]
.Op-cutfail : forall<a> .op-cutfail<a>
.Op-fail : forall<a> .op-fail<a>
.Op-flip : .op-flip
.Op-get : forall<a> .op-get<a>
.Op-put : forall<a> (i : a) -> .op-put<a>
.Op-symbol : (s : string) -> .op-symbol
.Ops-cutfail: forall<a,b> (cutfail : .op-cutfail<b>) -> .ops-cutfail<b>
.Ops-fail : forall<a,b> (fail : .op-fail<b>) -> .ops-nondet<b>
.Ops-flip : forall<a> (flip : .op-flip) -> .ops-nondet<bool>
.Ops-get : forall<a,b> (get : .op-get<a>) -> .ops-state<a,a>
.Ops-put : forall<a,b> (put : .op-put<a>) -> .ops-state<a,()>
.Ops-symbol : forall<a> (symbol : .op-symbol) -> .ops-symbol<string>
.tag-cutfail: string
.tag-nondet : string
.tag-state : string
.tag-symbol : string
call : forall<a,e> (p : () -> <cutfail,nondet|e> a) -> <nondet|e> a
choice : forall<a,e> (p1 : () -> <nondet|e> a, p2 : () -> <nondet|e> a) -> <nondet|e> a
choices : forall<a,e> (action : () -> <nondet,state<int>|e> a) -> <nondet,state<int>|e> a
collect : forall<a,e> (() -> <nondet|e> a) -> <nondet|e> a
cut : () -> <cutfail,nondet> ()
cutfail : forall<a> () -> cutfail a
digit : () -> <nondet,symbol> string
digits : list<string>
expr : () -> <nondet,symbol,div> int
factor : () -> <nondet,symbol,div> int
fail : forall<a> () -> nondet a
flip : () -> nondet bool
get : forall<a> () -> (state<a>) a
global : forall<a,b,e> (s : a, action : () -> <nondet,state<a>|e> b) -> e (a, list<b>)
hcutfail : forall<a,e> (action : () -> <cutfail,nondet|e> a) -> <nondet|e> a
incr : (i : ?int) -> (state<int>) ()
knapsack : (w : int, vs : list<int>) -> <nondet,div> list<int>
local : forall<a,b,e> (s : a, action : () -> <nondet,state<a>|e> b) -> e list<(a, b)>
main : () -> <div,console> ()
many : forall<a,e> (p : () -> <nondet,div|e> a) -> <nondet,div|e> list<a>
many1 : forall<a,e> (p : () -> <nondet,div|e> a) -> <nondet,div|e> list<a>
mymap : forall<a,b,e> (list<a>, (a) -> e b) -> e list<b>
number : () -> <nondet,symbol,div> int
once : forall<a,e> (p : () -> <cutfail,nondet|e> a) -> <nondet|e> a
parse : forall<a,e> (cs : string, action : () -> <nondet,symbol|e> a) -> <nondet|e> a
put : forall<a> (i : a) -> (state<a>) ()
select : forall<a> (list<a>) -> nondet a
show : (xs : list<(int, list<int>)>) -> string
show : (x : (int, list<list<int>>)) -> string
show : (xss : list<list<int>>) -> string
solutions : forall<a,e> (action : () -> <nondet|e> a) -> e list<a>
state : forall<a,b,e> (i : a, action : () -> <state<a>|e> b) -> e (a, b)
symbol : (s : string) -> symbol string
term : () -> <nondet,symbol,div> int
test1 : () -> div list<list<int>>
test2 : () -> div (int, list<list<int>>)
test3 : () -> div list<(int, list<int>)>
test4 : () -> div list<list<int>>
test5 : () -> div list<int>